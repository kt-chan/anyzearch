FROM local/build-arm64 AS build

USER root
COPY ./collector/ /app/collector
WORKDIR /app/collector

RUN yarn install --production --network-timeout 1000000 && yarn cache clean

################################################################################
# Those library have to be installed in final image if run in a bundled package#
##################################################################################
##RUN echo "Running common build flow of AnyZearch image for all architectures"
##RUN npm install -g puppeteer
##RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
##    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
##    libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxi-dev libxtst-dev libnss3 \
##    libcups2 libxss1 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libgtk-3-0 libgbm1 wget 
##RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
##RUN apt install -y ./google-chrome-stable_current_amd64.deb
##ENV PUPPETEER_DOWNLOAD_BASE_URL=https://storage.googleapis.com/chrome-for-testing-public 
##ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false
##ENV CHROME_PATH="/usr/bin/google-chrome-stable"
##ENV PUPPETEER_EXECUTABLE_PATH="/usr/bin/google-chrome-stable"

RUN apt-get install -yq chromium-chromedriver



# Setup scripts, Copy docker helper scripts
COPY ./docker/docker-entrypoint-collector.sh /usr/local/bin/docker-entrypoint.sh
COPY ./docker/docker-healthcheck-collector.sh /usr/local/bin/docker-healthcheck.sh

# Ensure the scripts are executable
RUN chown -R anythingllm:anythingllm /app/collector
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-healthcheck.sh

# Setup the environment
USER anythingllm
WORKDIR /app/collector

ENV NODE_ENV=production
ENV ANYTHING_LLM_RUNTIME=docker


# Expose the server port
EXPOSE 8888

# Setup the healthcheck
HEALTHCHECK --interval=1m --timeout=10s --start-period=1m \
  CMD /bin/bash /usr/local/bin/docker-healthcheck.sh || exit 1

# Run the server
# CMD ["sh", "-c", "tail -f /dev/null"] # For development: keep container open
ENTRYPOINT ["/bin/bash", "/usr/local/bin/docker-entrypoint.sh"]
